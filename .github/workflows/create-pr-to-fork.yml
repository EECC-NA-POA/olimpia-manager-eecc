name: Create PR to Fork Repository

on:
  push:
    branches: [release]
  workflow_dispatch:

jobs:
  create-pr-to-fork:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout 'release' branch
        uses: actions/checkout@v4
        with:
          ref: release
          fetch-depth: 0 # fetch-depth: 0 √© crucial para ter todo o hist√≥rico

      - name: Configure Git for External Push
        env:
          FORK_REPO_TOKEN: ${{ secrets.FORK_REPO_TOKEN }}
        run: |
          # Configura o Git para usar o token como credencial para GitHub.com
          # Isso √© mais robusto do que incluir o token diretamente na URL do remote,
          # pois o Git usar√° este helper para qualquer opera√ß√£o em github.com
          git config --global url."https://x-access-token:${FORK_REPO_TOKEN}@github.com/".insteadOf "https://github.com/"
          
          # 1. Configurar o Git (usu√°rio e e-mail)
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # 2. Adicionar o remote do fork. Agora que o helper de credenciais est√° configurado,
          # o Git usar√° o token automaticamente ao interagir com este remote.
          echo "Adding fork remote..."
          # A URL √© a normal, pois a autentica√ß√£o ser√° tratada pelo helper configurado acima
          git remote add fork "https://github.com/EECC-NA-POA/olimpia-manager-eecc.git"
          
          git fetch fork --depth=1 # Apenas para verificar a conex√£o, n√£o precisa de todo o hist√≥rico do fork
          echo "Remotes configured:"
          git remote -v

      - name: Create and Push Branch to Fork
        env:
          FORK_REPO_TOKEN: ${{ secrets.FORK_REPO_TOKEN }} # Mantemos para garantir que esteja dispon√≠vel, se necess√°rio
        run: |
          # 3. Criar uma branch √∫nica a partir da 'release'
          BRANCH_NAME="sync-from-release-$(date +%Y%m%d-%H%M%S)"
          echo "Creating branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME" # Usar aspas para garantir que o nome da branch seja interpretado corretamente

          # 4. Fazer o push da nova branch para o fork
          echo "Pushing branch to fork..."
          # Agora, o remote 'fork' se autenticar√° usando o helper configurado no passo anterior
          git push -u fork "$BRANCH_NAME"

          # 5. Salvar o nome da branch para o pr√≥ximo passo
          echo "BRANCH_NAME=$BRANCH_NAME" >> "$GITHUB_ENV" # Usar aspas para garantir que o nome da vari√°vel seja interpretado corretamente

      - name: Get Last Commit Information
        id: commit_info # Adicionando um ID para referenciar os outputs
        run: |
          # Salva as informa√ß√µes do commit como outputs do passo
          echo "COMMIT_HASH=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
          echo "COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')" >> "$GITHUB_OUTPUT"
          echo "COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')" >> "$GITHUB_OUTPUT"
          echo "COMMIT_DATE=$(git log -1 --pretty=format:'%ci')" >> "$GITHUB_OUTPUT"
          
      - name: Create or Update Pull Request
        env:
          # O GitHub CLI (gh) usa GH_TOKEN para autentica√ß√£o
          # √â crucial que este GH_TOKEN tamb√©m tenha as permiss√µes corretas no FORK_REPO_TOKEN
          GH_TOKEN: ${{ secrets.FORK_REPO_TOKEN }}
          # Referencia as vari√°veis de ambiente e outputs dos passos anteriores
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
          COMMIT_HASH: ${{ steps.commit_info.outputs.COMMIT_HASH }}
          COMMIT_AUTHOR: ${{ steps.commit_info.outputs.COMMIT_AUTHOR }}
          COMMIT_MESSAGE: ${{ steps.commit_info.outputs.COMMIT_MESSAGE }}
          COMMIT_DATE: ${{ steps.commit_info.outputs.COMMIT_DATE }}
        run: |
          echo "Creating PR from $BRANCH_NAME to 'release' in fork repository..."
          
          # Monta o corpo do PR
          PR_BODY="## Sincroniza√ß√£o autom√°tica do reposit√≥rio privado

          **Commit:** \`$COMMIT_HASH\`
          **Autor:** $COMMIT_AUTHOR
          **Data:** $COMMIT_DATE
          **Mensagem:** $COMMIT_MESSAGE
          
          Este PR foi criado automaticamente ap√≥s um push na branch \`release\` do reposit√≥rio privado.
          
          **Reposit√≥rio origem:** bonanza-ong/olimpia-manager-na"

          # Tenta criar o PR. Se falhar, √© porque provavelmente j√° existe.
          # O '--repo' especifica o reposit√≥rio onde o PR ser√° criado.
          gh pr create \
            --repo "EECC-NA-POA/olimpia-manager-eecc" \
            --base "release" \
            --head "$BRANCH_NAME" \
            --title "üîÑ Sincroniza√ß√£o: $COMMIT_MESSAGE" \
            --body "$PR_BODY" || echo "PR j√° existe ou ocorreu um erro. O workflow continuar√°."

      - name: Final Success Notification
        if: success()
        run: |
          echo "‚úÖ Workflow completed successfully!"
          echo "Uma branch foi enviada e um Pull Request foi criado/atualizado no reposit√≥rio EECC-NA-POA/olimpia-manager-eecc."
