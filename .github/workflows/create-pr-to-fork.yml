
name: Create PR to Fork Repository

on:
  push:
    branches: [release]
  workflow_dispatch:

jobs:
  create-pr-to-fork:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: release
          fetch-depth: 0
          # Use default GITHUB_TOKEN for private repo operations
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Add fork remote and fetch
        run: |
          echo "Adding fork remote..."
          # Use FORK_REPO_TOKEN only for fork operations
          git remote add fork https://${{ secrets.FORK_REPO_TOKEN }}@github.com/EECC-NA-POA/olimpia-manager-eecc.git
          git fetch fork
          echo "Remotes configured:"
          git remote -v

      - name: Create and push branch to fork
        run: |
          # Create a unique branch name with timestamp
          BRANCH_NAME="sync-from-release-$(date +%Y%m%d-%H%M%S)"
          echo "Creating branch: $BRANCH_NAME"
          
          # Create new branch based on current release
          git checkout -b $BRANCH_NAME
          
          # Push to fork using FORK_REPO_TOKEN
          echo "Pushing branch to fork..."
          git push fork $BRANCH_NAME
          
          # Save branch name for next step
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Get commit information
        run: |
          # Get current commit information
          COMMIT_HASH=$(git rev-parse HEAD)
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
          COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')
          COMMIT_DATE=$(git log -1 --pretty=format:'%ci')
          
          # Save for next step
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
          echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV

      - name: Create Pull Request
        env:
          # Use FORK_REPO_TOKEN for GitHub CLI operations on fork
          GH_TOKEN: ${{ secrets.FORK_REPO_TOKEN }}
        run: |
          echo "Creating PR from $BRANCH_NAME to release in fork repository..."
          
          # Create PR body with commit information
          PR_BODY="## SincronizaÃ§Ã£o automÃ¡tica do repositÃ³rio privado
          
          **Commit:** \`$COMMIT_HASH\`
          **Autor:** @$COMMIT_AUTHOR
          **Data:** $COMMIT_DATE
          **Mensagem:** $COMMIT_MESSAGE
          
          Este PR foi criado automaticamente apÃ³s um commit na branch \`release\` do repositÃ³rio privado.
          
          **RepositÃ³rio origem:** bonanza-ong/olimpia-manager-na
          **Fluxo:** release (repo privado) â†’ release (repo pÃºblico)
          **Branch temporÃ¡ria:** $BRANCH_NAME"
          
          # Try to create the PR targeting release branch
          gh pr create \
            --repo EECC-NA-POA/olimpia-manager-eecc \
            --base release \
            --head $BRANCH_NAME \
            --title "ðŸ”„ SincronizaÃ§Ã£o: $COMMIT_MESSAGE" \
            --body "$PR_BODY" || {
              echo "Failed to create PR. Checking if it already exists..."
              
              # Check if a PR already exists for this branch
              existing_pr=$(gh pr list --repo EECC-NA-POA/olimpia-manager-eecc --head $BRANCH_NAME --json number --jq '.[0].number' 2>/dev/null || echo "")
              
              if [ -n "$existing_pr" ] && [ "$existing_pr" != "null" ]; then
                echo "PR already exists: #$existing_pr"
                echo "Updating existing PR..."
                gh pr edit $existing_pr --repo EECC-NA-POA/olimpia-manager-eecc --body "$PR_BODY"
              else
                echo "Error creating PR and no existing PR found"
                exit 1
              fi
            }

      - name: Clean up
        if: always()
        run: |
          echo "Cleaning up..."
          # Remove the fork remote
          git remote remove fork || true
          echo "Cleanup completed"

      - name: Success notification
        run: |
          echo "âœ… Workflow completed successfully!"
          echo "A Pull Request has been created (or updated) in the fork repository."
          echo "Repository: EECC-NA-POA/olimpia-manager-eecc"
          echo "Target branch: release"
          echo "Triggered by commit: $COMMIT_HASH"
          echo "Commit author: $COMMIT_AUTHOR"
